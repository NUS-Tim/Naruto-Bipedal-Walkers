import random
import math
import numpy as np
import Box2D
from Box2D.b2 import edgeShape, circleShape, fixtureDef, polygonShape, revoluteJointDef, contactListener
import gym
from gym import spaces
from gym.utils import seeding, EzPickle

FPS    = 50
SCALE  = 30.0

MOTORS_TORQUE = 80
SPEED_HIP     = 4
SPEED_KNEE    = 6
LIDAR_RANGE   = 160/SCALE
INITIAL_RANDOM = 5

HEAD_HEIGHT = 43/SCALE
LEG_DOWN = -8/SCALE
LEG_W, LEG_H = 8/SCALE, 34/SCALE

VIEWPORT_W = 600
VIEWPORT_H = 400

TERRAIN_STEP   = 14/SCALE
TERRAIN_LENGTH = 300
TERRAIN_HEIGHT = VIEWPORT_H/SCALE/4
TERRAIN_GRASS    = 10
TERRAIN_STARTPAD = 80
FRICTION = 2.5

HULL_POLY =[
    (-4,+35), (+8,+35), (+8,+1),
    (+8,-8), (-6,-8)
    ]

HEAD_POLY =[
    (-6,+5), (+11,+5),
    (+11,-10), (-6,-10)
    ]

ARM_POLY =[
    (-3,+1), (+3,+1),
    (+3,-49), (-3,-49)
    ]

HAIR_1_POLY=[
    (-6,+2),(+11,+2),
    (+11,-1),(-6,-1)
    ]

HAIR_2_POLY=[
    (-10,+4),(+11,+4),
    (+11,2),(-10,2)
    ]

HAIR_3_PLOY=[
    (-14,+1),(1,+1),
    (1,-2),(-14,-2)
    ]

HAIR_4_PLOY=[
    (-12,9),(-8,9),
    (-12,-6),(-8,-6)
    ]

HARI_4_FD = fixtureDef(
                shape = polygonShape(vertices=[(x/SCALE,y/SCALE) for x,y in HAIR_4_PLOY]),
                density = 0.01,
                friction = 0.1,
                categoryBits = 0x0020,
                maskBits = 0x001,
                restitution = 0.0)

HARI_3_FD = fixtureDef(
                shape = polygonShape(vertices=[(x/SCALE,y/SCALE) for x,y in HAIR_3_PLOY]),
                density = 0.005,
                friction = 0.1,
                categoryBits = 0x0020,
                maskBits = 0x001,
                restitution = 0.0)

HARI_2_FD = fixtureDef(
                shape = polygonShape(vertices=[(x/SCALE,y/SCALE) for x,y in HAIR_2_POLY]),
                density = 0.01,
                friction = 0.1,
                categoryBits = 0x0020,
                maskBits = 0x001,
                restitution = 0.0)

HARI_1_FD = fixtureDef(
                shape = polygonShape(vertices=[(x/SCALE,y/SCALE) for x,y in HAIR_1_POLY]),
                density = 1.0,
                friction = 0.1,
                categoryBits = 0x0020,
                maskBits = 0x001,
                restitution = 0.0)

HEAD_FD = fixtureDef(
                shape = polygonShape(vertices=[(x/SCALE,y/SCALE) for x,y in HEAD_POLY]),
                density = 1.0,
                friction = 0.1,
                categoryBits = 0x0020,
                maskBits = 0x001,
                restitution = 0.0)

HULL_FD = fixtureDef(
                shape = polygonShape(vertices=[(x/SCALE,y/SCALE) for x,y in HULL_POLY]),
                density = 5.0,
                friction = 0.1,
                categoryBits = 0x0020,
                maskBits = 0x001,
                restitution = 0.0)

ARM_FD = fixtureDef(
                shape = polygonShape(vertices=[(x/SCALE,y/SCALE) for x,y in ARM_POLY]),
                density = 0.2,
                friction = 0.1,
                categoryBits = 0x0020,
                maskBits = 0x001,
                restitution = 0.0)

LEG_FD = fixtureDef(
                    shape = polygonShape(box=(LEG_W/2, LEG_H/2)),
                    density = 1.1,
                    restitution = 0.0,
                    categoryBits = 0x0020,
                    maskBits = 0x001)

LOWER_FD = fixtureDef(
                    shape = polygonShape(box=(0.8*LEG_W/2, LEG_H/2)),
                    density = 1.7,
                    restitution = 0.0,
                    categoryBits = 0x0020,
                    maskBits = 0x001)

class ContactDetector(contactListener):

    def __init__(self, env):

        contactListener.__init__(self)
        self.env = env

    def BeginContact(self, contact):

        if self.env.hull == contact.fixtureA.body or self.env.hull == contact.fixtureB.body:
            self.env.game_over = True
        elif self.env.head == contact.fixtureA.body or self.env.head == contact.fixtureB.body:
            self.env.game_over = True
        elif self.env.arm_1 == contact.fixtureA.body or self.env.arm_1 == contact.fixtureB.body:
            self.env.game_over = True
        elif self.env.arm_2 == contact.fixtureA.body or self.env.arm_2 == contact.fixtureB.body:
            self.env.game_over = True
        elif self.env.hair_2 == contact.fixtureA.body or self.env.hair_2 == contact.fixtureB.body:
            self.env.game_over = True
        elif self.env.hair_1 == contact.fixtureA.body or self.env.hair_1 == contact.fixtureB.body:
            self.env.game_over = True

        for leg in [self.env.legs[1], self.env.legs[3]]:
            if leg in [contact.fixtureA.body, contact.fixtureB.body]:
                leg.ground_contact = True

    def EndContact(self, contact):

        for leg in [self.env.legs[1], self.env.legs[3]]:
            if leg in [contact.fixtureA.body, contact.fixtureB.body]:
                leg.ground_contact = False

class BipedalWalker(gym.Env, EzPickle):

    metadata = {
        'render.modes': ['human', 'rgb_array'],
        'video.frames_per_second' : FPS
    }

    def __init__(self):

        EzPickle.__init__(self)
        self.seed()
        self.viewer = None
        self.world = Box2D.b2World()
        self.terrain = None
        self.hull = None
        self.prev_shaping = None
        self.fd_polygon = fixtureDef(
                        friction = FRICTION
        )
        self.fd_edge = fixtureDef(
                    shape = edgeShape(vertices=
                    [(0, 0),
                     (1, 1)]),
                    friction = FRICTION,
                    categoryBits = 0x0001
        )
        self.reset()
        high = np.array([np.inf] * 24)
        self.action_space = spaces.Box(np.array([-1, -1, -1, -1]), np.array([1, 1, 1, 1]), dtype=np.float32)
        self.observation_space = spaces.Box(-high, high, dtype=np.float32)

    def seed(self, seed=None):

        np_random, seed = seeding.np_random(seed)
        return [seed]

    def _destroy(self):

        if not self.terrain: return
        self.world.contactListener = None

        for t in self.terrain:
            self.world.DestroyBody(t)
        self.terrain = []
        self.world.DestroyBody(self.hull)
        self.world.DestroyBody(self.head)
        self.world.DestroyBody(self.arm_1)
        self.world.DestroyBody(self.arm_2)
        self.world.DestroyBody(self.hair_1)
        self.world.DestroyBody(self.hair_2)
        self.world.DestroyBody(self.hair_3)
        self.world.DestroyBody(self.hair_4)
        self.arms = None
        self.head = None
        self.hull = None

        for leg in self.legs:
            self.world.DestroyBody(leg)

        self.legs = []
        self.joints = []

    def _generate_terrain(self):

        a = 0.4666666666666667
        d = 0.4666666666666667
        n = 299
        x_terr = [0]

        for i in range(n):
            an = a + d * i
            x_terr.append(an)

        a = 3.3333333333333335
        d = 0
        y_terr_lv0 = []

        for i in range(300):
            an = a + d * i
            y_terr_lv0.append(an)

        fluctuation = 0.0
        y = TERRAIN_HEIGHT

        self.terrain_x = x_terr
        self.terrain   = []
        self.terrain_y = []

        random_TERRAIN = True
        if random_TERRAIN == True:

            for i in range(TERRAIN_LENGTH):
                fluctuation = 0.8 * fluctuation + 0.01 * np.sign(TERRAIN_HEIGHT - y)
                if i > TERRAIN_STARTPAD: fluctuation += random.uniform(-1, 1)/SCALE
                y += 0.9*fluctuation

                self.terrain_y.append(y)

        self.terrain_y_level0 = y_terr_lv0
        self.terrain_y_level1 = [3.3333333333333335, 3.3333333333333335, 3.3333333333333335, 3.3333333333333335,
                                 3.3333333333333335, 3.3333333333333335, 3.3333333333333335, 3.3333333333333335,
                                 3.3333333333333335, 3.3333333333333335, 3.3333333333333335, 3.3333333333333335,
                                 3.3333333333333335, 3.3333333333333335, 3.3333333333333335, 3.3333333333333335,
                                 3.3333333333333335, 3.3333333333333335, 3.3333333333333335, 3.3333333333333335,
                                 3.3333333333333335, 3.3333333333333335, 3.3333333333333335, 3.3333333333333335,
                                 3.3333333333333335, 3.3333333333333335, 3.3333333333333335, 3.3333333333333335,
                                 3.3333333333333335, 3.3333333333333335, 3.3333333333333335, 3.3333333333333335,
                                 3.3333333333333335, 3.3333333333333335, 3.3333333333333335, 3.3333333333333335,
                                 3.3333333333333335, 3.3333333333333335, 3.3333333333333335, 3.3333333333333335,
                                 3.3333333333333335, 3.3333333333333335, 3.3333333333333335, 3.3333333333333335,
                                 3.3333333333333335, 3.3333333333333335, 3.3333333333333335, 3.3333333333333335,
                                 3.3333333333333335, 3.3333333333333335, 3.3333333333333335, 3.3333333333333335,
                                 3.3333333333333335, 3.3333333333333335, 3.3333333333333335, 3.3333333333333335,
                                 3.3333333333333335, 3.3333333333333335, 3.3333333333333335, 3.3333333333333335,
                                 3.3333333333333335, 3.3333333333333335, 3.3333333333333335, 3.3333333333333335,
                                 3.3333333333333335, 3.3333333333333335, 3.3333333333333335, 3.3333333333333335,
                                 3.3333333333333335, 3.3333333333333335, 3.3333333333333335, 3.3333333333333335,
                                 3.3333333333333335, 3.3333333333333335, 3.3333333333333335, 3.3333333333333335,
                                 3.3333333333333335, 3.3333333333333335, 3.3333333333333335, 3.3333333333333335,
                                 3.2538737096280057, 3.2887457861822402, 3.350817357625211,  3.403479639121798,
                                 3.4628836397822793, 3.5100514000672045, 3.5467215120080953, 3.5753129870730684,
                                 3.5992333950137634, 3.5811004798071226, 3.535050463237255,  3.519015001153209,
                                 3.4684534847931547, 3.400682454025317,  3.3068022755990674, 3.2324137931974666,
                                 3.203306343898538,  3.17452024321182,   3.1306511295126054, 3.1338196669630802,
                                 3.1255465160214833, 3.120015040713376,  3.1391820886846173, 3.140078539667398,
                                 3.1224816155516577, 3.1356520814182143, 3.1648073378045654, 3.186891251976247,
                                 3.221159086999937,  3.2562565855870793, 3.315611788094886,  3.3891014480315347,
                                 3.4613320577532773, 3.525472329051222,  3.5798933638505126, 3.633194687662511,
                                 3.6733413848618492, 3.6703781046768267, 3.641738852295795,  3.6274013290647082,
                                 3.616448492936057,  3.6082641072784534, 3.5614420477537236, 3.5291735238997997,
                                 3.5199570229014383, 3.5248000154867727, 3.541762635431604,  3.525195707088393,
                                 3.511958262930385,  3.497648516185421,  3.4711746061872226, 3.4187159579488315,
                                 3.3833682511975214, 3.3285170431628184, 3.2820628867882355, 3.2724515436009765,
                                 3.3052258786708424, 3.3156561765207555, 3.348889250458925,  3.3532276480705283,
                                 3.3300417425007565, 3.2977288069835353, 3.2630187482397766, 3.2584602566528975,
                                 3.2650677648507247, 3.299711027208235,  3.342176070406219,  3.3941048202632222,
                                 3.417973528726345,  3.4501370023921947, 3.4936402479463227, 3.530685689333589,
                                 3.5503180551792397, 3.528649347902328,  3.4964391540684687, 3.4573820133941697,
                                 3.4357523046521483, 3.3894757748046622, 3.3302803193361368, 3.323552869938248,
                                 3.3385545369945793, 3.3325802472088117, 3.3501445079880567, 3.3700741718798506,
                                 3.398199656289169,  3.429599503815543,  3.465974703640651,  3.5041571300408854,
                                 3.5496850759879686, 3.582744838495399,  3.6024562464029994, 3.6185539305723955,
                                 3.6262413247597647, 3.5961246784154133, 3.566229223022457,  3.501979988460654,
                                 3.456973873794011,  3.431785207555152,  3.416423596531687,  3.413804776310194,
                                 3.3821225494097114, 3.3270149743630983, 3.281502223581613,  3.2825464664178488,
                                 3.268858086215058,  3.2421615010735367, 3.242223462674083,  3.2552554368467077,
                                 3.307736862636907,  3.3772943209651047, 3.419516956411961,  3.473587167390307,
                                 3.478062954082304,  3.4569252571859796, 3.4478043507580742, 3.4232101514271913,
                                 3.3916781310177537, 3.3861780467650378, 3.367525717617257,  3.3556759514545487,
                                 3.3114382993918063, 3.267503779631746,  3.2302746442584587, 3.189488343595632,
                                 3.1691367341286085, 3.1658798519788345, 3.1984018952279865, 3.208993677456526,
                                 3.197920275928253,  3.1704891664517567, 3.1436175069311263, 3.163952829971324,
                                 3.1672520128984196, 3.1729951064245334, 3.164423888327691,  3.184982577485291,
                                 3.196401132941952,  3.203937490921292,  3.2216095991235347, 3.2150454732626166,
                                 3.197102740470158,  3.1840928500757415, 3.2058926831180736, 3.2314096569886726,
                                 3.2618213857948586, 3.3079699904836057, 3.347712165206628,  3.4024410678150327,
                                 3.4414957494016924, 3.4415611647073705, 3.444670210895516,  3.421803760574336,
                                 3.3716610571151424, 3.3019018718702364, 3.2687719221025793, 3.2614742270997703,
                                 3.294577050929714,  3.330533541887852,  3.3645804546417937, 3.405381148203337,
                                 3.4166480853415013, 3.399397529863066,  3.362095695712538,  3.3041434900303313,
                                 3.2942615116442777, 3.303781920999458,  3.3166289219523226, 3.3652735325488607,
                                 3.368891079883606,  3.330091494554155,  3.320518619606352,  3.318066353409253,
                                 3.297312096141749,  3.2705786134335897, 3.265119369219626,  3.2974572685394063,
                                 3.3611922394758103, 3.3923971346925605, 3.426346380159325,  3.4354321676118658,
                                 3.4638011023428006, 3.4803341035767805, 3.481716177463057,  3.4688230352828175,
                                 3.416087139972998,  3.3783258320484433, 3.350594262137373,  3.332062933867488,
                                 3.3348131683923445, 3.3363039144122153, 3.2965352604620954, 3.275162574917822,
                                 3.282553142188707,  3.2992990713584813, 3.340849797750136,  3.332755883089539,
                                 3.314467056345589,  3.3176149262674057, 3.3136170469121486, 3.318840302338566,
                                 3.3522559676155,    3.336955135834117,  3.3221722182413953, 3.2891799690668675,
                                 3.261782278326287,  3.220178763940799,  3.173734300895044,  3.1475446701399012,
                                 3.1186162838127482, 3.0826780395565043, 3.0943159770917728, 3.0897600088760058,
                                 3.0635466117063954, 3.0477771804903413, 3.0311902033494773, 2.9987218266430036,
                                 2.9649437520340514, 2.926596891274033,  2.898449039905506,  2.8785544296876613]
        self.terrain_y_level2 = [3.3333333333333335, 3.3333333333333335, 3.3333333333333335, 3.3333333333333335,
                                 3.3333333333333335, 3.3333333333333335, 3.3333333333333335, 3.3333333333333335,
                                 3.3333333333333335, 3.3333333333333335, 3.3333333333333335, 3.3333333333333335,
                                 3.3333333333333335, 3.3333333333333335, 3.3333333333333335, 3.3333333333333335,
                                 3.3333333333333335, 3.3333333333333335, 3.3333333333333335, 3.3333333333333335,
                                 3.3333333333333335, 3.3333333333333335, 3.3333333333333335, 3.3333333333333335,
                                 3.3333333333333335, 3.3333333333333335, 3.3333333333333335, 3.3333333333333335,
                                 3.3333333333333335, 3.3333333333333335, 3.3333333333333335, 3.3333333333333335,
                                 3.3333333333333335, 3.3333333333333335, 3.3333333333333335, 3.3333333333333335,
                                 3.3333333333333335, 3.3333333333333335, 3.3333333333333335, 3.3333333333333335,
                                 3.3333333333333335, 3.3333333333333335, 3.3333333333333335, 3.3333333333333335,
                                 3.3333333333333335, 3.3333333333333335, 3.3333333333333335, 3.3333333333333335,
                                 3.3333333333333335, 3.3333333333333335, 3.3333333333333335, 3.3333333333333335,
                                 3.3333333333333335, 3.3333333333333335, 3.3333333333333335, 3.3333333333333335,
                                 3.3333333333333335, 3.3333333333333335, 3.3333333333333335, 3.3333333333333335,
                                 3.3333333333333335, 3.3333333333333335, 3.3333333333333335, 3.3333333333333335,
                                 3.3333333333333335, 3.3333333333333335, 3.3333333333333335, 3.3333333333333335,
                                 3.3333333333333335, 3.3333333333333335, 3.3333333333333335, 3.3333333333333335,
                                 3.3333333333333335, 3.3333333333333335, 3.3333333333333335, 3.3333333333333335,
                                 3.3333333333333335, 3.3333333333333335, 3.3333333333333335, 3.3333333333333335,
                                 3.4067417174928494, 3.436924583839702,  3.421366323260317,  3.403274014242072,
                                 3.338965988787622,  3.292753570179974,  3.2453113575285437, 3.1791036011336993,
                                 3.1204363342393733, 3.0623951940727756, 3.0204272545501407, 3.016615851469199,
                                 3.0528808037437245, 3.072817362331378,  3.1350758514439563, 3.1829263725722177,
                                 3.238042759938458,  3.2964096779210568, 3.348766549078093,  3.417412141532477,
                                 3.4548058597419224, 3.4540689393104262, 3.4294938613401196, 3.399994080214244,
                                 3.3784929008161244, 3.3648257185410535, 3.336399047690224,  3.2671573905304925,
                                 3.2591473435848273, 3.2313468086354367, 3.233448169915239,  3.2064614256763604,
                                 3.1827376459127916, 3.145359139503881,  3.108382713980033,  3.09312625964702,
                                 3.128953695544609,  3.2036076413111307, 3.30161008793804,   3.4206879712459894,
                                 3.5349633622284307, 3.6343233480367627, 3.707641200141954,  3.7557723069070534,
                                 3.805708956370275,  3.827847300768768,  3.8683730515325028, 3.86058889283072,
                                 3.843038115048009,  3.8199506969182617, 3.7628395945934465, 3.6647326441951664,
                                 3.539438580153514,  3.4386215386117938, 3.3167561516887085, 3.2620983694704773,
                                 3.220399296455943,  3.221167797385351,  3.2468724841927847, 3.253412841615368,
                                 3.3066167484061713, 3.3204522941909227, 3.318469256301621,  3.327398068910383,
                                 3.3279827280715972, 3.316111488240832,  3.335297400992121,  3.355005044681227,
                                 3.339000579668203,  3.3452215176972073, 3.3241660957944954, 3.3177506042151164,
                                 3.3609750044371816, 3.3442692998274604, 3.334084103645534,  3.295790586557514,
                                 3.264287492534572,  3.289407069487585,  3.338364720346582,  3.3245605263940776,
                                 3.295027956369525,  3.3064006126069017, 3.3044045980040297, 3.2808578951275305,
                                 3.306694469463638,  3.3073309826547104, 3.296515950793742,  3.307694946640722,
                                 3.368418000238502,  3.3662707605878492, 3.3506778110776336, 3.2865396692237168,
                                 3.248704454921946,  3.2450308921628155, 3.224230823941454,  3.231287305963492,
                                 3.2573357402910315, 3.287872744036323,  3.364299847822154,  3.4282587992325717,
                                 3.4571440477052793, 3.4752452206321163, 3.480974746678738,  3.4504368951167708,
                                 3.4023614504099107, 3.3435214099282606, 3.2470962785556163, 3.207831418060136,
                                 3.183530344917435,  3.198676828038464,  3.254024349674586,  3.2962636981405695,
                                 3.319970838210596,  3.3903672458808147, 3.4735627467942374, 3.5593766490208236,
                                 3.624223541284639,  3.6690012296041092, 3.6551124079581436, 3.6601764024571914,
                                 3.6358688791459426, 3.585588113134016,  3.50284474067869,   3.4218113090194775,
                                 3.3718476576577014, 3.2906179798207615, 3.2678817367953585, 3.2697282230021663,
                                 3.250833752654103,  3.257670550244466,  3.291948580130844,  3.3346248750222744,
                                 3.3672211970882526, 3.413157204194276,  3.461227876158463,  3.511913642931735,
                                 3.5035845930115603, 3.456457743065961,  3.3765013078661554, 3.321865098258149,
                                 3.2496924774524336, 3.181816364679116,  3.1647561096422328, 3.150888422733291,
                                 3.1898829690156942, 3.2146959450304173, 3.2581342388345025, 3.282348108489223,
                                 3.328367317473723,  3.4126243094880637, 3.426920475747426,  3.4379251516961795,
                                 3.4040575894476475, 3.386647218476262,  3.373261700193293,  3.389053455391039,
                                 3.363588145157563,  3.3672254660494945, 3.367031394599437,  3.344161981172449,
                                 3.333240563833813,  3.3080231041143313, 3.298598911879262,  3.274163820070206,
                                 3.294801077067416,  3.339365758690394,  3.3280156029478274, 3.370508166656649,
                                 3.4327130113809985, 3.434069158573432,  3.4532372125927617, 3.423000697562354,
                                 3.4055634496286453, 3.3797805317242706, 3.374588606071956,  3.354817394417273,
                                 3.2987429562958885, 3.252715187713347,  3.255606520911917,  3.240758927262954,
                                 3.2366432770050406, 3.2587821966224224, 3.320410950617835,  3.4091310544844955,
                                 3.498630242188432,  3.5357790486165217, 3.541122860853975,  3.4930859090891824,
                                 3.429866754911008,  3.3846778383987046, 3.315524900444673,  3.25031805070648,
                                 3.1986574578162843, 3.2106969527907205, 3.244545940919415,  3.2813399285521414,
                                 3.3480399766225664, 3.3883127149777144, 3.4041192643937186, 3.412280513975656,
                                 3.409413683856317,  3.3648217341657096, 3.3261400972606245, 3.305297239924051,
                                 3.3243314112724263, 3.318508208982518,  3.3226071145720057, 3.365931555706383,
                                 3.3529448433713362, 3.371167307679301,  3.3844309214978425, 3.407370465213054,
                                 3.4015222697415037, 3.4180894528936667, 3.402350231752449,  3.3364468684980286,
                                 3.3088142358033306, 3.3019761520088413, 3.2697304740893958, 3.2382220846426355]
        self.terrain_y_level3 = [3.3333333333333335, 3.3333333333333335, 3.3333333333333335, 3.3333333333333335,
                                 3.3333333333333335, 3.3333333333333335, 3.3333333333333335, 3.3333333333333335,
                                 3.3333333333333335, 3.3333333333333335, 3.3333333333333335, 3.3333333333333335,
                                 3.3333333333333335, 3.3333333333333335, 3.3333333333333335, 3.3333333333333335,
                                 3.3333333333333335, 3.3333333333333335, 3.3333333333333335, 3.3333333333333335,
                                 3.3333333333333335, 3.3333333333333335, 3.3333333333333335, 3.3333333333333335,
                                 3.3333333333333335, 3.3333333333333335, 3.3333333333333335, 3.3333333333333335,
                                 3.3333333333333335, 3.3333333333333335, 3.3333333333333335, 3.384235912218111,
                                 3.4541757519854093, 3.517182901011925,  3.5948250783540776, 3.6905122205036314,
                                 3.7337461471524556, 3.78097481804167,   3.822723115008938,  3.8704736754124642,
                                 3.842162615455619,  3.823165623329506,  3.827654162387584,  3.807498069251429,
                                 3.7612280467506047, 3.704328177812828,  3.6520564056197062, 3.6237962726270774,
                                 3.577364749296636,  3.5705322739304814, 3.5607436444626472, 3.500772329844356,
                                 3.3975449853398154, 3.3036517077603675, 3.241438931537491,  3.175513097936123,
                                 3.0876181449334665, 3.006344409993551,  2.934465929772404,  2.900598169047801,
                                 2.838380972638003,  2.837744668537363,  2.8637693002649622, 2.8984075261970803,
                                 2.9296887503108016, 3.000653425375625,  3.116089846692168,  3.2261015890171887,
                                 3.289210010720346,  3.364627207640146,  3.37978055203801,   3.3994097211425776,
                                 3.349177806223101,  3.340598135569167,  3.3312085195197154, 3.388910467652794,
                                 3.4096907090735784, 3.4017025494429105, 3.3816029319104333, 3.3117740394341717,
                                 3.2610837408776505, 3.207160960168655,  3.1983501383107256, 3.1718541149723856,
                                 3.2097203800090197, 3.3044772427189355, 3.3459482274034693, 3.3159306787066756,
                                 3.3384944738551545, 3.3107097111848813, 3.278932189139653,  3.3005761373880382,
                                 3.307942517978904,  3.2976814260593454, 3.3204919054548103, 3.4043409375738185,
                                 3.437622540350359,  3.4497482292031005, 3.3930137626914068, 3.307361357579036,
                                 3.2340112880220517, 3.218409223546214,  3.255447466614831,  3.301937694433192,
                                 3.384867959506581,  3.4459905951566965, 3.512725870498215,  3.5008522574498584,
                                 3.516302915810756,  3.462945326280289,  3.435978647842417,  3.408666200174232,
                                 3.418207471263359,  3.4368276902274584, 3.485034542223742,  3.5429604671143284,
                                 3.5874971724151767, 3.618031407349795,  3.5880258034528683, 3.5727821424217217,
                                 3.5750708750829916, 3.5737044763406494, 3.586754797273062,  3.57607055129785,
                                 3.542619373837777,  3.5341255901631463, 3.5131680836508417, 3.4787973222679347,
                                 3.4243961527315108, 3.3713812289458733, 3.3135810614221732, 3.2496471896896413,
                                 3.19550460130949,   3.1861555495258966, 3.22040184440419,   3.2311963819283473,
                                 3.2444924681281293, 3.2807406945244173, 3.3084855638337505, 3.378041939914333,
                                 3.4464196591075518, 3.5259957521563874, 3.5862972801593145, 3.6287518372759378,
                                 3.6384700754514814, 3.660886726637855,  3.703954552973889,  3.700018093699687,
                                 3.656601491425987,  3.6400393703849625, 3.6640523776784937, 3.7091811507802435,
                                 3.710390678095021,  3.68922099500008,   3.6564024080801887, 3.6644284773703695,
                                 3.6129522623050505, 3.546045611736301,  3.435158822690056,  3.2855027121547153,
                                 3.185372791121637,  3.099527226908389,  3.027586156040442,  2.973551220726129,
                                 2.921497842560375,  2.9280399245626882, 2.9309966166205683, 2.902570196320357,
                                 2.9001769068580723, 2.8754848852905623, 2.8490428937398744, 2.7939830399285164,
                                 2.76603315441788,   2.749068460981117,  2.7137055666080605, 2.747337719459705,
                                 2.838599455245172,  2.887261970280974,  2.9166662271221733, 2.9614595569218856,
                                 2.961943123232193,  3.0259764293322404, 3.096506964505705,  3.183065787198409,
                                 3.2548656081837564, 3.3720286984445678, 3.455309673979193,  3.5409336779143175,
                                 3.6347218989936385, 3.723948022980678,  3.726465787401003,  3.673097073932226,
                                 3.640066593546217,  3.595938974696721,  3.5364646795425836, 3.430370547312667,
                                 3.370298410973276,  3.2940510292585587, 3.2855926272762916, 3.3293384524105365,
                                 3.346351541197708,  3.36469262912384,   3.379653626823736,  3.337195949725001,
                                 3.326823039912452,  3.3213664390895166, 3.354071775094837,  3.4155696517341276,
                                 3.415712501140057,  3.366173391601807,  3.308544646147254,  3.2372367093436676,
                                 3.23471617637195,   3.201574654999226,  3.1573155569149907, 3.144374608137981,
                                 3.129321170753434,  3.1021050072498486, 3.0489648296079954, 3.0697502484284844,
                                 3.1208142257762894, 3.159659253703831,  3.2066627315488874, 3.3017318516264154,
                                 3.41940745363666,   3.489787516340275,  3.5034527516010434, 3.5228637344236606,
                                 3.5211201544509043, 3.5255539500228674, 3.5352967626595966, 3.486339626580003,
                                 3.438907535699388,  3.382476004350397,  3.309847696785356,  3.256118664614086,
                                 3.1833900434830285, 3.151259683046191,  3.1608354116358055, 3.1560912273793518,
                                 3.1482169491344223, 3.208552184162228,  3.2961410103224074, 3.3924023850645755,
                                 3.4990175559049295, 3.5379678819943385, 3.564789728536861,  3.549255861428644,
                                 3.4985035815466374, 3.4514584284251484, 3.3844526884429613, 3.2809616301172637,
                                 3.2359203949236957, 3.1787969999978154, 3.1948301571672437, 3.275250702795501,
                                 3.3567272770566796, 3.3575638646881276, 3.297776142603898,  3.2163786294322576,
                                 3.1210606699961874, 3.0912587700951484, 3.1028347840448087, 3.158749281629738,
                                 3.1946270241927577, 3.2246550445478337, 3.25307802456067,   3.2766823975443318,
                                 3.310871512462866,  3.364440340542665,  3.391454439297275,  3.3962527557963575,
                                 3.3359203374682758, 3.319882691008873,  3.3363819080807264, 3.359356146708355,
                                 3.351553776936764,  3.30621445560757,   3.265021047078924,  3.244373140925069,
                                 3.2631036624311696, 3.2723189022448556, 3.2654456085512122, 3.238871288496576,
                                 3.2737260703387863, 3.3693286821618704, 3.4004869423521478, 3.387239747741572,
                                 3.3818440517518367, 3.375708876220301,  3.363066848192113,  3.367550732965547,
                                 3.3501878905343445, 3.3132228509423216, 3.2707149575726855, 3.203314026632608,
                                 3.1488096905192426, 3.0793421634526745, 2.997667076498361,  2.9092108338164064]

        if random_TERRAIN == False:

            level = 0

            if level == 0:
                self.terrain_y = self.terrain_y_level0
            elif level == 1:
                self.terrain_y = self.terrain_y_level1
            elif level == 2:
                self.terrain_y = self.terrain_y_level2
            elif level == 3:
                self.terrain_y = self.terrain_y_level3
            else:
                print("  Wrong input, please check")

        self.terrain_poly = []

        for i in range(TERRAIN_LENGTH-1):

            poly = [
                (self.terrain_x[i],   self.terrain_y[i]),
                (self.terrain_x[i+1], self.terrain_y[i+1])
                ]
            self.fd_edge.shape.vertices=poly
            t = self.world.CreateStaticBody(
                fixtures = self.fd_edge)
            color = (0.3, 1.0 if i%2 == 0 else 0.8, 0.3)
            t.color1 = color
            t.color2 = color
            self.terrain.append(t)
            color = (0.4, 0.6, 0.3)
            poly += [(poly[1][0],0), (poly[0][0],0)]
            self.terrain_poly.append((poly, color))

        self.terrain.reverse()

    def mark(self) :

        self.markshape = []
        for i in range(4,13):
            mark_x = i * TERRAIN_STEP * 20 * SCALE
            mark_y = TERRAIN_HEIGHT
            shape=[((-2+mark_x)/SCALE,0/SCALE+mark_y-10),((-2+mark_x)/SCALE,80/SCALE+mark_y),
                   ((2+mark_x)/SCALE,80/SCALE+mark_y),((2+mark_x)/SCALE,0/SCALE+mark_y-10)]
            self.markshape.append(shape)

    def flag(self):

        self.flagshape_1 = []
        self.flagshape_2 = []
        flag_x = TERRAIN_STEP * 60
        flag_y = 3.0
        flag_high = flag_y + 90 / SCALE
        shape_1 = [(flag_x, flag_high), (flag_x, flag_high - 20 / SCALE), (flag_x + 25 / SCALE, flag_high - 10 / SCALE)]
        shape_2 = [(flag_x - 1/30, flag_y), (flag_x - 1/30, flag_high), (flag_x + 1/30, flag_high), (flag_x + 1/30, flag_y)]
        self.flagshape_1.append(shape_1)
        self.flagshape_2.append(shape_2)
        flag_x = TERRAIN_STEP * 260
        shape_1 = [(flag_x, flag_high), (flag_x, flag_high - 20 / SCALE), (flag_x + 25 / SCALE, flag_high - 10 / SCALE)]
        shape_2 = [(flag_x - 1/30, flag_y), (flag_x - 1/30, flag_high), (flag_x + 1/30, flag_high), (flag_x + 1/30, flag_y)]
        self.flagshape_1.append(shape_1)
        self.flagshape_2.append(shape_2)

    def _generate_clouds(self):

        self.cloud_poly = []
        for i in range(TERRAIN_LENGTH//20):
            x = random.uniform(0, TERRAIN_LENGTH)*TERRAIN_STEP
            y = VIEWPORT_H/SCALE*3/4
            poly = [
                (x+15*TERRAIN_STEP*math.sin(3.14*2*a/5)+random.uniform(0,5*TERRAIN_STEP),
                 y+ 5*TERRAIN_STEP*math.cos(3.14*2*a/5)+random.uniform(0,5*TERRAIN_STEP))
                for a in range(5)]
            x1 = min( [p[0] for p in poly])
            x2 = max( [p[0] for p in poly])
            self.cloud_poly.append((poly,x1,x2))

    def reset(self):

        self._destroy()
        self.world.contactListener_bug_workaround = ContactDetector(self)
        self.world.contactListener = self.world.contactListener_bug_workaround
        self.game_over = False
        self.prev_shaping = None
        self.scroll = 0.0
        self.lidar_render = 0
        self._generate_terrain()
        self._generate_clouds()
        self.flag()
        self.mark()

        init_x = TERRAIN_STEP*60
        init_y = TERRAIN_HEIGHT+2*LEG_H

        self.hull = self.world.CreateDynamicBody(
            position = (init_x, init_y),
            angle=(0.0),
            fixtures = HULL_FD)
        self.hull.color1 = (0.89, 0.54, 0.23)
        self.hull.color2 = (0, 0, 0)
        self.hull.ApplyForceToCenter((random.uniform(-INITIAL_RANDOM, INITIAL_RANDOM), 0), True)
        self.legs = []
        self.joints = []

        for i in [-1,+1]:   # (-1，1)

            leg = self.world.CreateDynamicBody(
                position = (init_x, init_y - LEG_H/2 - LEG_DOWN),
                angle = (0),   # i*0.01
                fixtures = LEG_FD
            )
            leg.color1 = (0.89, 0.54, 0.23)
            leg.color2 = (0, 0, 0)

            rjd = revoluteJointDef(
                bodyA = self.hull,
                bodyB = leg,
                localAnchorA = (0, LEG_DOWN),
                localAnchorB = (0, LEG_H/2),
                enableMotor = True,
                enableLimit = True,
                maxMotorTorque = MOTORS_TORQUE,
                motorSpeed = i,
                lowerAngle = -0.8,
                upperAngle = 1.1,
            )

            self.legs.append(leg)
            self.joints.append(self.world.CreateJoint(rjd))

            lower = self.world.CreateDynamicBody(
                position = (init_x, init_y - LEG_H*3/2 - LEG_DOWN),
                angle = (0),
                fixtures = LOWER_FD
            )
            lower.color1 = (0.89, 0.54, 0.23)
            lower.color2 = (0, 0, 0)

            rjd = revoluteJointDef(
                bodyA = leg,
                bodyB = lower,
                localAnchorA = (0, -LEG_H/2),
                localAnchorB = (0, LEG_H/2),
                enableMotor = True,
                enableLimit = True,
                maxMotorTorque = MOTORS_TORQUE,
                motorSpeed = 1,
                lowerAngle = -1.6,
                upperAngle = -0.1,
            )

            lower.ground_contact = False
            self.legs.append(lower)
            self.joints.append(self.world.CreateJoint(rjd))

        self.head = self.world.CreateDynamicBody(
            position = (init_x, init_y + HEAD_HEIGHT),
            angle = (-0.0),
            fixtures = HEAD_FD
        )
        self.head.color1 = (0.99, 0.92, 0.86)
        self.head.color2 = (0, 0, 0)

        rjd = revoluteJointDef(
            bodyA = self.hull,
            bodyB = self.head,
            localAnchorA = (2/30, HEAD_HEIGHT + 1/30),
            localAnchorB = (0, 0),
            enableLimit = True,
            lowerAngle = 0,
            upperAngle = 0,
        )

        self.joints.append(self.world.CreateJoint(rjd))

        self.hair_1 = self.world.CreateDynamicBody(
            position = (init_x, init_y + HEAD_HEIGHT+16/30),
            fixtures = HARI_1_FD
        )
        self.hair_1.color1 = (0.11, 0.15, 0.36)
        self.hair_1.color2 = (0.11, 0.15, 0.36)

        rjd = revoluteJointDef(
            bodyA = self.hair_1,
            bodyB = self.head,
            localAnchorA = (0/30, 0),
            localAnchorB = (0, 6/30),
            enableLimit = True,
            lowerAngle = 0,
            upperAngle = 0,
        )

        self.joints.append(self.world.CreateJoint(rjd))

        self.hair_2 = self.world.CreateDynamicBody(
            position = (init_x, init_y + HEAD_HEIGHT+(16+3)/30),
            fixtures = HARI_2_FD
        )
        self.hair_2.color1 = (0.98, 0.98, 0.32)
        self.hair_2.color2 = (0.98, 0.98, 0.32)

        rjd = revoluteJointDef(
            bodyA = self.hair_2,
            bodyB = self.hair_1,
            localAnchorA = (0/30, 0),
            localAnchorB = (0, 3/30),
            enableLimit = True,
            lowerAngle = 0,
            upperAngle = 0,
        )
        self.joints.append(self.world.CreateJoint(rjd))

        self.hair_3 = self.world.CreateDynamicBody(
            position = (init_x-7/30, init_y + HEAD_HEIGHT+(16)/30),
            fixtures = HARI_3_FD
        )
        self.hair_3.color1 = (0.11, 0.15, 0.36)
        self.hair_3.color2 = (0.11, 0.15, 0.36)

        rjd = revoluteJointDef(
            bodyA = self.hair_3,
            bodyB = self.hair_1,
            localAnchorA = (0/30, 0),
            localAnchorB = (-7/30, 1/30),
            lowerAngle =+ 1.5,
            upperAngle = -1,
        )

        self.joints.append(self.world.CreateJoint(rjd))

        self.hair_4 = self.world.CreateDynamicBody(
            position = (init_x, init_y + HEAD_HEIGHT),
            fixtures = HARI_4_FD
        )
        self.hair_4.color1 = (0.98, 0.98, 0.32)
        self.hair_4.color2 = (0.98, 0.98, 0.32)

        rjd = revoluteJointDef(
            bodyA = self.hair_4,
            bodyB = self.head,
            localAnchorA = (0/30, 0),
            localAnchorB = (0/30, 0/30),
            enableLimit = True,
            lowerAngle = 0,
            upperAngle = 0,
        )

        self.joints.append(self.world.CreateJoint(rjd))

        self.arm_1 = self.world.CreateDynamicBody(
            position = (init_x, init_y),
            angle = (-1.4),
            fixtures = ARM_FD
        )
        self.arm_1.color1 = (0.89, 0.54, 0.23)
        self.arm_1.color2 = (0, 0, 0)

        rjd = revoluteJointDef(
            bodyA = self.hull,
            bodyB = self.arm_1,
            localAnchorA = (0, HEAD_HEIGHT/2+3/30),
            localAnchorB = (0, 0),
            enableLimit = True,
            lowerAngle =- 0.05,
            upperAngle =+ 0.00,
        )

        self.joints.append(self.world.CreateJoint(rjd))

        self.arm_2 = self.world.CreateDynamicBody(
            position = (init_x, init_y),
            angle = (-1.4),
            fixtures = ARM_FD
        )
        self.arm_2.color1 = (0.89, 0.54, 0.23)
        self.arm_2.color2 = (0, 0, 0)

        rjd = revoluteJointDef(
            bodyA = self.hull,
            bodyB = self.arm_2,
            localAnchorA = (0, HEAD_HEIGHT/2),
            localAnchorB = (0, 0),
            enableLimit = True,
            lowerAngle = 0,
            upperAngle = 0,
        )

        self.joints.append(self.world.CreateJoint(rjd))

        self.drawlist = self.terrain + self.legs + [self.hair_1] + [self.head] + [self.arm_1] + [self.hull] \
                        + [self.arm_2] + [self.hair_2] + [self.hair_1] + [self.hair_4] + [self.hair_3]

        class LidarCallback(Box2D.b2.rayCastCallback):

            def ReportFixture(self, fixture, point, normal, fraction):
                if (fixture.filterData.categoryBits & 1) == 0:
                    return -1
                self.p2 = point
                self.fraction = fraction
                return fraction

        self.lidar = [LidarCallback() for _ in range(10)]

        return self.step(np.array([0,0,0,0]))[0]

    def step(self, action):

        self.hull.ApplyForceToCenter((0, 20), True)
        self.joints[0].motorSpeed     = float(SPEED_HIP     * np.sign(action[0]))   #(-1，0，1)
        self.joints[0].maxMotorTorque = float(MOTORS_TORQUE * np.clip(np.abs(action[0]), 0, 1))   # 0-1
        self.joints[1].motorSpeed     = float(SPEED_KNEE    * np.sign(action[1]))
        self.joints[1].maxMotorTorque = float(MOTORS_TORQUE * np.clip(np.abs(action[1]), 0, 1))
        self.joints[2].motorSpeed     = float(SPEED_HIP     * np.sign(action[2]))
        self.joints[2].maxMotorTorque = float(MOTORS_TORQUE * np.clip(np.abs(action[2]), 0, 1))
        self.joints[3].motorSpeed     = float(SPEED_KNEE    * np.sign(action[3]))
        self.joints[3].maxMotorTorque = float(MOTORS_TORQUE * np.clip(np.abs(action[3]), 0, 1))

        self.world.Step(1.0/FPS, 6*30, 2*30)

        pos = self.hull.position
        vel = self.hull.linearVelocity

        for i in range(10):
            self.lidar[i].fraction = 1.0
            self.lidar[i].p1 = pos
            self.lidar[i].p2 = (
                pos[0] + math.sin(1.5*i/10.0)*LIDAR_RANGE,
                pos[1] - math.cos(1.5*i/10.0)*LIDAR_RANGE)
            self.world.RayCast(self.lidar[i], self.lidar[i].p1, self.lidar[i].p2)

        state = [
            self.hull.angle,
            2.0*self.hull.angularVelocity/FPS,
            0.3*vel.x*(VIEWPORT_W/SCALE)/FPS,
            0.3*vel.y*(VIEWPORT_H/SCALE)/FPS,
            self.joints[0].angle,
            self.joints[0].speed / SPEED_HIP,
            self.joints[1].angle + 1.0,
            self.joints[1].speed / SPEED_KNEE,
            1.0 if self.legs[1].ground_contact else 0.0,
            self.joints[2].angle,
            self.joints[2].speed / SPEED_HIP,
            self.joints[3].angle + 1.0,
            self.joints[3].speed / SPEED_KNEE,
            1.0 if self.legs[3].ground_contact else 0.0
            ]

        state += [l.fraction for l in self.lidar]
        assert len(state) == 24

        self.scroll = pos.x - VIEWPORT_W/SCALE/5

        shaping  = 130*pos[0]/SCALE
        shaping -= 5.0*abs(state[0])

        reward = 0
        if self.prev_shaping is not None:
            reward = shaping - self.prev_shaping
        self.prev_shaping = shaping

        for a in action:
            reward -= 0.00035 * MOTORS_TORQUE * np.clip(np.abs(a), 0, 1)

        done = False
        if self.game_over or pos[0] < TERRAIN_STEP*(60-1):
            reward = -100
            done   = True
        if pos[0] > (260)*TERRAIN_STEP:
            done   = True

        return np.array(state), reward, done, {}

    def render(self, mode='human'):

        from gym.envs.classic_control import rendering

        if self.viewer is None:
            self.viewer = rendering.Viewer(VIEWPORT_W, VIEWPORT_H)
        self.viewer.set_bounds(self.scroll, VIEWPORT_W/SCALE + self.scroll, 0, VIEWPORT_H/SCALE)

        self.viewer.draw_polygon([
            (self.scroll,                  0),
            (self.scroll+VIEWPORT_W/SCALE, 0),
            (self.scroll+VIEWPORT_W/SCALE, VIEWPORT_H/SCALE),
            (self.scroll,                  VIEWPORT_H/SCALE),
            ], color=(0.9, 0.9, 1.0))

        for shape_1 in self.flagshape_1:
            self.viewer.draw_polygon(shape_1, color=(0.95, 0.1, 0.1))

        for shape_2 in self.flagshape_2:
            self.viewer.draw_polygon(shape_2, color=(0.1, 0.1, 0.1))

        for shape in self.markshape:
            self.viewer.draw_polygon(shape,color=(0.95, 0.1, 0.1))

        for poly,x1,x2 in self.cloud_poly:
            if x2 < self.scroll/2: continue
            if x1 > self.scroll/2 + VIEWPORT_W/SCALE: continue
            self.viewer.draw_polygon( [(p[0]+self.scroll/2, p[1]) for p in poly], color=(1,1,1))

        for poly, color in self.terrain_poly:
            if poly[1][0] < self.scroll: continue
            if poly[0][0] > self.scroll + VIEWPORT_W/SCALE: continue
            self.viewer.draw_polygon(poly, color=color)

        for obj in self.drawlist:
            for f in obj.fixtures:

                trans = f.body.transform
                if type(f.shape) is circleShape:
                    t = rendering.Transform(translation=trans*f.shape.pos)
                    self.viewer.draw_circle(f.shape.radius, 30, color=obj.color1).add_attr(t)
                    self.viewer.draw_circle(f.shape.radius, 30, color=obj.color2, filled=False, linewidth=2).add_attr(t)
                else:
                    path = [trans*v for v in f.shape.vertices]
                    self.viewer.draw_polygon(path, color=obj.color1)
                    path.append(path[0])
                    self.viewer.draw_polyline(path, color=obj.color2, linewidth=2)

        return self.viewer.render(return_rgb_array = mode=='rgb_array')

    def close(self):

        if self.viewer is not None:
            self.viewer.close()
            self.viewer = None
